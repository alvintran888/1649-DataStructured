/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package asm.ui;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Vector;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Admin
 */
public class HomePageViewFrm extends javax.swing.JFrame {

    ArrayList<Accessories> accessoryList = new ArrayList<>();
    int id = 1;
    File file = new File("acc.txt");
    
    public HomePageViewFrm() {
        initComponents();
    }
    private void writeFile(){
        try(ObjectOutputStream out = new ObjectOutputStream(
                new BufferedOutputStream(
                new FileOutputStream(file)))){
            out.writeObject(accessoryList);
        }catch(Exception ex){
            
        }
    }
    private void readFile(){
        if(accessoryList.isEmpty()){
            try(ObjectInputStream in = new ObjectInputStream(
                new BufferedInputStream(
                new FileInputStream(file)))){
                accessoryList.addAll((Collection<? extends Accessories>) in.readObject());
            }catch(Exception ex){
                
            }
        }
    }
private int editedIndex;
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        publisherHomePage = new javax.swing.JTextField();
        accessoryHomePage = new javax.swing.JTextField();
        categoryHomePage = new javax.swing.JTextField();
        IDHomePage = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        costHomePage = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        add = new javax.swing.JButton();
        searchHomePage = new javax.swing.JTextField();
        search = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableHomePage = new javax.swing.JTable();
        editHomePage = new javax.swing.JButton();
        deleteHomePage = new javax.swing.JButton();
        deleteallHomePage = new javax.swing.JButton();
        exit = new javax.swing.JButton();
        sort = new javax.swing.JButton();
        view = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Asm_Nghia");
        setAlwaysOnTop(true);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Input ID for edit:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel3.setText("Accessory");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel4.setText("Category");

        publisherHomePage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                publisherHomePageActionPerformed(evt);
            }
        });

        accessoryHomePage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                accessoryHomePageActionPerformed(evt);
            }
        });

        IDHomePage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IDHomePageActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setText("Publisher");

        costHomePage.setPreferredSize(new java.awt.Dimension(6, 10));
        costHomePage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                costHomePageActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel5.setText("Cost");

        add.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        add.setText("Add New Accessory");
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });

        search.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        search.setText("Search");
        search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchActionPerformed(evt);
            }
        });

        tableHomePage.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "            ID ", "Accessorry", "Category", "Publisher", "Cost"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tableHomePage);

        editHomePage.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        editHomePage.setText("Edit");
        editHomePage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editHomePageActionPerformed(evt);
            }
        });

        deleteHomePage.setText("Delete");
        deleteHomePage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteHomePageActionPerformed(evt);
            }
        });

        deleteallHomePage.setText("Delete all");
        deleteallHomePage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteallHomePageActionPerformed(evt);
            }
        });

        exit.setText("Exit");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });

        sort.setText("Sort");

        view.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        view.setText("View");
        view.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(205, 135, 65));
        jLabel6.setText("Accessory Manager");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(sort, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(exit, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel3))
                        .addGap(82, 82, 82)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 761, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(60, 60, 60)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(deleteHomePage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(deleteallHomePage, javax.swing.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(accessoryHomePage, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(costHomePage, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(categoryHomePage, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(publisherHomePage, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 135, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(add, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(view, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addComponent(IDHomePage)
                                                .addComponent(searchHomePage, javax.swing.GroupLayout.DEFAULT_SIZE, 346, Short.MAX_VALUE))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(392, 392, 392)))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(search)
                                            .addComponent(editHomePage, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(82, 82, 82)))))
                .addGap(35, 35, 35))
            .addGroup(layout.createSequentialGroup()
                .addGap(562, 562, 562)
                .addComponent(jLabel6)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(38, 38, 38)
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(accessoryHomePage, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel3))
                                        .addGap(38, 38, 38)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(categoryHomePage, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel4))
                                        .addGap(35, 35, 35)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(publisherHomePage, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel2))
                                        .addGap(32, 32, 32)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(costHomePage, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel5)))
                                    .addComponent(view, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addContainerGap(188, Short.MAX_VALUE)
                                .addComponent(add, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(39, 39, 39)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(searchHomePage, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(search, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(30, 30, 30)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(IDHomePage, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(editHomePage, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(64, 64, 64)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(deleteHomePage, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31)
                        .addComponent(deleteallHomePage, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(90, 90, 90)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(exit, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sort, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(55, 55, 55))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

     DefaultTableModel tableHomePagee;
    
    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
       addAccessory();
    }//GEN-LAST:event_addActionPerformed

    private void IDHomePageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IDHomePageActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_IDHomePageActionPerformed

    private void costHomePageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_costHomePageActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_costHomePageActionPerformed

    private void publisherHomePageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_publisherHomePageActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_publisherHomePageActionPerformed

    private void viewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewActionPerformed
                for (Accessories acc : accessoryList) {
            System.out.println(acc.getId());
            System.out.println(acc.getAccessory());
            System.out.println(acc.getCategory());
            System.out.println(acc.getPublisher());
            System.out.println(acc.getCost());
        }
        String[] headers = {"ID", "Accessory", "Category", "Publisher", "Cost"};
        tableHomePagee = new DefaultTableModel(headers, 0);
        Vector vector = null;
        for (Accessories acc : accessoryList) {
            vector = new Vector();
            vector.add(acc.getId());
            vector.add(acc.getAccessory());
            vector.add(acc.getCategory());
            vector.add(acc.getPublisher());
            vector.add(acc.getCost());

            tableHomePagee.addRow(vector);
          
        }
        readFile();
        tableHomePage.setModel(tableHomePagee);
        
    }//GEN-LAST:event_viewActionPerformed

    private void searchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchActionPerformed
                                         
       try {
            String ten = searchHomePage.getText();
            ArrayList<Accessories> listFind = new ArrayList<>();
            if (ten != "") {
                String str;
                for (Accessories pass : accessoryList) {
                    str = pass.getAccessory();
                    if (str.contains(ten)) {
                        listFind.add(pass);
                    }
                }
            }
            if (listFind.size() > 0) {
                JOptionPane.showMessageDialog(this, "HAD FOUND");
                tableHomePagee.getDataVector().removeAllElements();
                tableHomePagee.fireTableDataChanged();
                int i = 0;
                for (Accessories pass : listFind) {
                    i++;
                    tableHomePagee.addRow(new Object[]{i, pass.getAccessory(), pass.getCategory(), pass.getPublisher(), pass.getCost() });
                    tableHomePagee.fireTableDataChanged();
                }
            } else {
                JOptionPane.showMessageDialog(this, "NOT FOUND !!!!!");
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "ERRORR");
        }
        
    }//GEN-LAST:event_searchActionPerformed

    private void accessoryHomePageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_accessoryHomePageActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_accessoryHomePageActionPerformed

    private void editHomePageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editHomePageActionPerformed

        updateAccessory();
        
    }//GEN-LAST:event_editHomePageActionPerformed

    private void deleteHomePageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteHomePageActionPerformed
       
         int confirmed = JOptionPane.showConfirmDialog(null,
                "Do you want to delete this information?", "Confirm Delete!",
                JOptionPane.YES_NO_OPTION);
        if (confirmed == JOptionPane.YES_OPTION) {
        
       if (accessoryList.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No data!");
            return;
        }
        if (tableHomePage.getSelectedRow() == -1) {
            JOptionPane.showMessageDialog(this, "You have to chosse one product to delete!");
            return;
        }
        for (Accessories acc : accessoryList) {
            if (acc.getId() == Integer.parseInt(tableHomePage.getValueAt(tableHomePage.getSelectedRow(), 0).toString())) {
                accessoryList.remove(acc);
                break;
            }
        }  
        writeFile();
        }
      
    }//GEN-LAST:event_deleteHomePageActionPerformed

    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        
//         int arr[] = {1, 2, 3, 4, 5, 6, 7, 8};
//  
//        for (int i = 0; i < arr.length; i++)
//        {
//            if (arr[i] >= 5)
//            {
//                System.out.println("exit...");
//  
//                
//                System.exit(0);
//            }
//            else{
//                System.out.println("arr["+i+"] = " +
//                                  arr[i]);
//            
//            
//            }
//            
//            JOptionPane.showConfirmDialog(this, "Are you want delete?");
//            
//        }
//        System.out.println("End of Program");
//        
//            JOptionPane.showConfirmDialog(this, "Are you want  ");
            this.setVisible(false);
            writeFile();
        
        
//        JOptionPane.showMessageDialog(this, "Are you sure to exit program?");
    }//GEN-LAST:event_exitActionPerformed

    private void deleteallHomePageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteallHomePageActionPerformed
        // TODO add your handling code here:
        
            
        
        if (accessoryList.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No data!");
            return;
        }
        accessoryList.removeAll(accessoryList);
        JOptionPane.showMessageDialog(this, "Deleted successfully!");
        writeFile();
    }//GEN-LAST:event_deleteallHomePageActionPerformed
private void addAccessory() {
        //Validate all fields and check the ID whether the employee is duplicated or not
        
       
            try
            {
                String error = validateAccessory();
                if (error == "")
                    {
                        boolean found = false;
                        for(Accessories acc : accessoryList){
                            if(acc.getAccessory().equals(accessoryHomePage.getText())){
                                found = true;
                                break;
                            }
                        }
                        if (found)
                        {
                            JOptionPane.showMessageDialog(rootPane, "Accessory already exists?");
                        }
                        else
                        {
                            Accessories acc = new Accessories();
                            acc.setId(id++);
                            acc.setAccessory(accessoryHomePage.getText());
                            acc.setCategory(categoryHomePage.getText());
                            acc.setPublisher(publisherHomePage.getText());
                            acc.setCost(Double.parseDouble(costHomePage.getText()));
                            accessoryList.add(acc);
                            writeFile();
                            JOptionPane.showMessageDialog(this, "Insert successfully!");
                        }
                        
                    } else {
                        JOptionPane.showMessageDialog(rootPane, error);
                }
                
         
            } catch (Exception e)
            {
                e.getStackTrace();
               // JOptionPane.showMessageDialog(rootPane, "ID submit error, may be ID is empty?");
                
            }
}
            
private void updateAccessory() {
        //Validate all fields and check the ID whether the employee is duplicated or not
        
       
            try
            {
                if (IDHomePage.getText().length() == 0) {
                    JOptionPane.showMessageDialog(this, "You must input ID!");
                 }
                  else{
                     boolean found = false;
                     for(Accessories acc : accessoryList){
                         if(acc.getId() == Integer.parseInt(IDHomePage.getText())){
                             found = true;
                             String error = validateAccessory();
                             if (error == "")
                                 {
                                     accessoryList.get(accessoryList.indexOf(acc)).setAccessory(accessoryHomePage.getText());
                                     accessoryList.get(accessoryList.indexOf(acc)).setCategory(categoryHomePage.getText());
                                     accessoryList.get(accessoryList.indexOf(acc)).setPublisher(publisherHomePage.getText());
                                     accessoryList.get(accessoryList.indexOf(acc)).setCost(Double.parseDouble(costHomePage.getText()));
                                     JOptionPane.showMessageDialog(this, "updated successful");
                                 } else {
                                     JOptionPane.showMessageDialog(rootPane, error);
                             }

                         break;
                         }

                     }
                     if(!found){

                         JOptionPane.showMessageDialog(this, "not found");
                         writeFile();
                     }
                  }
         
            } catch (Exception e)
            {
                e.getStackTrace();
               JOptionPane.showMessageDialog(rootPane, "ID submit error, may be ID contains special character?");
                
            }
        
    }

    private String validateAccessory()
    {
        String error = "";
        Pattern pattern = Pattern.compile("[^a-zA-Z]");
        Matcher matcher1 = pattern.matcher(String.valueOf(accessoryHomePage.getText()));
        Matcher matcher2 = pattern.matcher(String.valueOf(categoryHomePage.getText()));
        Matcher matcher3 = pattern.matcher(String.valueOf(publisherHomePage.getText()));

        if (accessoryHomePage.getText().length() == 0) {
            error += "Accessory field cannot be left blank!\n";
        }
        else if (matcher1.matches()) {
            error += "Accessory name contains invalid characters!\n";
        }
        
        if (categoryHomePage.getText().length() == 0) {
            error += "Category field cannot be left blank!\n";
        }
        else if (matcher2.matches()) {
            error += "Category contains invalid characters!\n";
        }

        if (publisherHomePage.getText().length() == 0) {
            error += "Publisher field cannot be left blank!\n";
        }
        else if (matcher3.matches()) {
            error += "Publisher contains invalid characters!\n";
        }

        
        try {
           double costLength = costHomePage.getText().length();
           if (costLength != 0) {
                double cost = Double.parseDouble(costHomePage.getText());
                if (cost < 20000) {
                    error += "Price must be 20.000VND or more!\n";
                }
            } else {
                error += "Price cannot be left blank!\n";
            } 
        } catch (Exception e){
             JOptionPane.showMessageDialog(rootPane, "Invalid price format, maybe contains special character??");
            e.getStackTrace();
        }
        
        return error;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HomePageViewFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HomePageViewFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HomePageViewFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HomePageViewFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HomePageViewFrm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField IDHomePage;
    private javax.swing.JTextField accessoryHomePage;
    private javax.swing.JButton add;
    private javax.swing.JTextField categoryHomePage;
    private javax.swing.JTextField costHomePage;
    private javax.swing.JButton deleteHomePage;
    private javax.swing.JButton deleteallHomePage;
    private javax.swing.JButton editHomePage;
    private javax.swing.JButton exit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField publisherHomePage;
    private javax.swing.JButton search;
    private javax.swing.JTextField searchHomePage;
    private javax.swing.JButton sort;
    private javax.swing.JTable tableHomePage;
    private javax.swing.JButton view;
    // End of variables declaration//GEN-END:variables

 
}
